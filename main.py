import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "6530969728:AAHU6Rs_HHzCBoWI_xnqAgny2krnE0AaW9Y"  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_ID = 5585811533     # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID (—É–∑–Ω–∞–π –≤ @userinfobot)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ===
products = []
reviews = []

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_main_kb(is_admin=False):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–¢–æ–≤–∞—Ä—ã")
    kb.button(text="–û—Ç–∑—ã–≤—ã")
    kb.button(text="–ò–Ω—Å—Ç–∞–≥—Ä–∞–º")
    if is_admin:
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

# === FSM ===
class AddProduct(StatesGroup):
    photo = State()
    description = State()
    price = State()

class AddReview(StatesGroup):
    photo = State()

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_kb(is_admin))

@dp.message(F.text == "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º")
async def instagram(message: Message):
    await message.answer("üå∏ –ù–∞—à Instagram: https://www.instagram.com/florist.giza/")

@dp.message(F.text == "–û—Ç–∑—ã–≤—ã")
async def show_reviews(message: Message):
    if not reviews:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    for photo_id in reviews:
        await message.answer_photo(photo_id)

@dp.message(F.text == "–¢–æ–≤–∞—Ä—ã")
async def show_products(message: Message):
    if not products:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    for idx, prod in enumerate(products):
        kb = InlineKeyboardBuilder()
        kb.button(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {prod['price']:,} —Å—É–º", callback_data=f"buy:{idx}")
        caption = f"{prod['description']}\n–¶–µ–Ω–∞: {prod['price']:,} —Å—É–º"
        await message.answer_photo(photo=prod["photo_id"], caption=caption, reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("buy:"))
async def handle_buy(callback: CallbackQuery):
    idx = int(callback.data.split(":")[1])
    prod = products[idx]
    user = callback.from_user
    username = user.username or user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await bot.send_photo(
        ADMIN_ID,
        photo=prod["photo_id"],
        caption=f"üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:\n{prod['description']}\n–¶–µ–Ω–∞: {prod['price']:,} —Å—É–º\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}"
    )
    await callback.answer()

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ===
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.photo)

@dp.message(AddProduct.photo, F.photo)
async def product_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.description)

@dp.message(AddProduct.description)
async def product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Å—É–º–º–∞—Ö (UZS):")
    await state.set_state(AddProduct.price)

@dp.message(AddProduct.price)
async def product_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    data = await state.get_data()
    products.append({
        "photo_id": data["photo_id"],
        "description": data["description"],
        "price": int(message.text)
    })
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_kb(True))
    await state.clear()

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ===
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def add_review(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞:")
    await state.set_state(AddReview.photo)

@dp.message(AddReview.photo, F.photo)
async def review_photo(message: Message, state: FSMContext):
    reviews.append(message.photo[-1].file_id)
    await message.answer("‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_kb(True))
    await state.clear()

# === –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ===
@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not products:
        await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    for idx, prod in enumerate(products):
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_product:{idx}")
        await message.answer_photo(
            photo=prod["photo_id"],
            caption=f"{prod['description']}\n–¶–µ–Ω–∞: {prod['price']:,} —Å—É–º",
            reply_markup=kb.as_markup()
        )

@dp.callback_query(F.data.startswith("del_product:"))
async def delete_product(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", show_alert=True)
        return
    idx = int(callback.data.split(":")[1])
    if 0 <= idx < len(products):
        products.pop(idx)
        await callback.message.delete()
        await callback.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")

# === –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ===
@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")
async def delete_review_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not reviews:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    for idx, photo_id in enumerate(reviews):
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_review:{idx}")
        await message.answer_photo(photo_id, reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("del_review:"))
async def delete_review(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", show_alert=True)
        return
    idx = int(callback.data.split(":")[1])
    if 0 <= idx < len(reviews):
        reviews.pop(idx)
        await callback.message.delete()
        await callback.answer("üóëÔ∏è –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
